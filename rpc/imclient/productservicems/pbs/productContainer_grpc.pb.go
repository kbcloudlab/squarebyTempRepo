// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: rpc/imserver/protos/servicedefinition/productContainer.proto

package pbs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductContainerServiceClient is the client API for ProductContainerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductContainerServiceClient interface {
	GetProductContainerListByIdList(ctx context.Context, in *ProductContainerRequest, opts ...grpc.CallOption) (*ProductContainerResponse, error)
}

type productContainerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductContainerServiceClient(cc grpc.ClientConnInterface) ProductContainerServiceClient {
	return &productContainerServiceClient{cc}
}

func (c *productContainerServiceClient) GetProductContainerListByIdList(ctx context.Context, in *ProductContainerRequest, opts ...grpc.CallOption) (*ProductContainerResponse, error) {
	out := new(ProductContainerResponse)
	err := c.cc.Invoke(ctx, "/servicedefinition.ProductContainerService/GetProductContainerListByIdList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductContainerServiceServer is the server API for ProductContainerService service.
// All implementations must embed UnimplementedProductContainerServiceServer
// for forward compatibility
type ProductContainerServiceServer interface {
	GetProductContainerListByIdList(context.Context, *ProductContainerRequest) (*ProductContainerResponse, error)
	mustEmbedUnimplementedProductContainerServiceServer()
}

// UnimplementedProductContainerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductContainerServiceServer struct {
}

func (UnimplementedProductContainerServiceServer) GetProductContainerListByIdList(context.Context, *ProductContainerRequest) (*ProductContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductContainerListByIdList not implemented")
}
func (UnimplementedProductContainerServiceServer) mustEmbedUnimplementedProductContainerServiceServer() {
}

// UnsafeProductContainerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductContainerServiceServer will
// result in compilation errors.
type UnsafeProductContainerServiceServer interface {
	mustEmbedUnimplementedProductContainerServiceServer()
}

func RegisterProductContainerServiceServer(s grpc.ServiceRegistrar, srv ProductContainerServiceServer) {
	s.RegisterService(&ProductContainerService_ServiceDesc, srv)
}

func _ProductContainerService_GetProductContainerListByIdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductContainerServiceServer).GetProductContainerListByIdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicedefinition.ProductContainerService/GetProductContainerListByIdList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductContainerServiceServer).GetProductContainerListByIdList(ctx, req.(*ProductContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductContainerService_ServiceDesc is the grpc.ServiceDesc for ProductContainerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductContainerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "servicedefinition.ProductContainerService",
	HandlerType: (*ProductContainerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProductContainerListByIdList",
			Handler:    _ProductContainerService_GetProductContainerListByIdList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/imserver/protos/servicedefinition/productContainer.proto",
}
